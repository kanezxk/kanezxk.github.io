<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>PAT乙级_1002</title>
    <url>/2020/06/02/PAT%E4%B9%99%E7%BA%A7-1002/</url>
    <content><![CDATA[<h2 id="【介绍】"><a href="#【介绍】" class="headerlink" title="【介绍】"></a>【介绍】</h2><p>读入一个正整数 <em>n</em>，计算其各位数字之和，用汉语拼音写出和的每一位数字。</p>
<h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>每个测试输入包含 1 个测试用例，即给出自然数 <em>n</em> 的值。这里保证 <em>n</em> 小于 10100。</p>
<h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行内输出 <em>n</em> 的各位数字之和的每一位，拼音数字间有 1 空格，但一行中最后一个拼音数字后没有空格。</p>
<h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1234567890987654321123456789</span><br></pre></td></tr></table></figure>

<h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yi san wu</span><br></pre></td></tr></table></figure>

<h2 id="【代码】"><a href="#【代码】" class="headerlink" title="【代码】"></a>【代码】</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *number[<span class="number">10</span>] = &#123;<span class="string">"ling"</span>, <span class="string">"yi"</span>, <span class="string">"er"</span>, <span class="string">"san"</span>, <span class="string">"si"</span>, <span class="string">"wu"</span>, <span class="string">"liu"</span>, <span class="string">"qi"</span>, <span class="string">"ba"</span>, <span class="string">"jiu"</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> s[<span class="number">3</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> i, sum, n;</span><br><span class="line">    <span class="keyword">char</span> t;</span><br><span class="line">    i = sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((t = getchar()) != <span class="string">'\n'</span>)</span><br><span class="line">        sum += t - <span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">while</span>(sum)</span><br><span class="line">    &#123;</span><br><span class="line">        s[i] = sum % <span class="number">10</span>;</span><br><span class="line">        sum /= <span class="number">10</span>;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    n = i;</span><br><span class="line">    <span class="keyword">for</span> (i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i != n - <span class="number">1</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s"</span>, number[s[i]]); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="【经验】"><a href="#【经验】" class="headerlink" title="【经验】"></a>【经验】</h2><p>开始时想直接用整数类型保存输入数，然后用取余的方式依次取出从低位到高位的数进行相加，结果反复出错。后来才注意到输入的正整数最大有可能取到100位，int型根本保存不了，只好用 getchar() 取出每一位。下为错误代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">char</span> *number[<span class="number">10</span>] = &#123; <span class="string">"ling"</span>, <span class="string">"yi"</span>, <span class="string">"er"</span>, <span class="string">"san"</span>, <span class="string">"si"</span>, <span class="string">"wu"</span>, <span class="string">"liu"</span>, <span class="string">"qi"</span>, <span class="string">"ba"</span>, <span class="string">"jiu"</span> &#125;;</span><br><span class="line">	<span class="keyword">int</span> s[<span class="number">3</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">	<span class="keyword">int</span> i, n, sum;</span><br><span class="line">	i = sum = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">	<span class="keyword">while</span> (n)</span><br><span class="line">	&#123;</span><br><span class="line">		sum += n % <span class="number">10</span>;</span><br><span class="line">		n /= <span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (sum)</span><br><span class="line">	&#123;</span><br><span class="line">		s[i] = sum % <span class="number">10</span>;</span><br><span class="line">		sum /= <span class="number">10</span>;</span><br><span class="line">		i++;</span><br><span class="line">	&#125;</span><br><span class="line">	n = i;</span><br><span class="line">	<span class="keyword">for</span> (i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (i != n - <span class="number">1</span>)</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%s"</span>, number[s[i]]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>刷题</category>
      </categories>
      <tags>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Markdown编写文章初体验</title>
    <url>/2020/05/28/%E4%BD%BF%E7%94%A8Markdown%E7%BC%96%E5%86%99%E6%96%87%E7%AB%A0%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
    <content><![CDATA[<p>[简介] 本文主要介绍使用markdown编写文档的常用格式</p>
<h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><p>二级标题两个#号。</p>
<h1 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h1><p>这是第一段。</p>
<p>这是第二段（直接使用回车空一行）。</p>
<h1 id="区块引用"><a href="#区块引用" class="headerlink" title="区块引用"></a>区块引用</h1><blockquote>
<p>这是一段引用段落，将会被高亮显示（使用 &gt; 符号）；</p>
<blockquote>
<p>这是二级嵌套引用（使用 &gt;&gt; 表示）；</p>
<blockquote>
<p>这是三级嵌套引用（使用 &gt;&gt;&gt; 表示）；</p>
<blockquote>
<p>以此类推…..</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><ul>
<li>使用 * 加一个空格表示；</li>
<li>也可以用 + 或 - 替代。</li>
</ul>
<h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><ol>
<li>使用阿拉伯数字加上 . 和空格来表示；</li>
<li>第二行；</li>
<li>第三行；</li>
</ol>
<h1 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h1><p>格式：</p>
<p><code>[超链接显示文字](https://kanezxk.github.io &quot;标题title&quot;)</code></p>
<p>超链接title为链接上的浮动提示信息，一般可省略。</p>
<p>样式：</p>
<p><a href="https://kanezxk.github.io" target="_blank" rel="noopener" title="标题title">超链接显示文字</a></p>
<h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><p>格式：</p>
<p><code>![显示文字](https://XXX.XXX.XXX &quot;图片title&quot;)</code></p>
<p>在超链接基础上多了一个” ! “  。</p>
<p>样式：</p>
<p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1588340329758&di=e72489ab96931ebed494989d2f132087&imgtype=0&src=http%3A%2F%2Fdimg02.c-ctrip.com%2Fimages%2Ftg%2F442%2F496%2F434%2Fd9e374b386644b86ba25103b166f739f_C_1600_1200_Mtg_7.jpg" alt="显示文字" title="图片title"></p>
<h1 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h1><h2 id="单行代码块"><a href="#单行代码块" class="headerlink" title="单行代码块"></a>单行代码块</h2><p>使用反单个双引号包起来（键盘第二行第一个键）。</p>
<p>格式：</p>
<p>`这是一个单行代码块`</p>
<p>样式：</p>
<p><code>这是一个单行代码块</code></p>
<h2 id="多行代码块"><a href="#多行代码块" class="headerlink" title="多行代码块"></a>多行代码块</h2><p>可以使用三个反引号来引用代码块，也可以使用一个tab或四个空格来表示 。在 ``` 后可以添加代码语言，可以对关键字进行不同颜色的显示。</p>
<p>格式：</p>
<p>样式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;Hello world\n&quot;)；</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h1><p>分割线可以由至少3个 - 来表示，其中的 “ - “ 号可以用 “ * “ 或 “ _ “ 来替换。</p>
<p>格式：</p>
<ol>
<li>-–</li>
<li>***</li>
<li>___</li>
</ol>
<p>样式：</p>
<hr>
<center>这是分割线</center>

<hr>
<h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><p>分割线前后的冒号表示对齐方式，写在左边表示左对齐，右边为右对齐，两边都写表示居中。</p>
<p>格式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">|编号 |产品 |仓库 |</span><br><span class="line">|:-  |-:   |:-:  |</span><br><span class="line">|01 |keyboard |Beijing|</span><br><span class="line">|02 |mouse |Shanghai|</span><br><span class="line">|03 |disk |Shenzhen|</span><br></pre></td></tr></table></figure>

<p>样式：</p>
<table>
<thead>
<tr>
<th align="left">编号</th>
<th align="right">产品</th>
<th align="center">仓库</th>
</tr>
</thead>
<tbody><tr>
<td align="left">01</td>
<td align="right">keyboard</td>
<td align="center">Beijing</td>
</tr>
<tr>
<td align="left">02</td>
<td align="right">mouse</td>
<td align="center">Shanghai</td>
</tr>
<tr>
<td align="left">03</td>
<td align="right">disk</td>
<td align="center">Shenzhen</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>备忘录</category>
      </categories>
      <tags>
        <tag>Web网页</tag>
      </tags>
  </entry>
  <entry>
    <title>利用hexo搭建个人博客</title>
    <url>/2020/05/28/%E5%88%A9%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>[简介] 本文主要介绍如何利用hexo搭建个人博客并部署到github上</p>
<h1 id="准备软件"><a href="#准备软件" class="headerlink" title="准备软件"></a>准备软件</h1><ol>
<li>NodeJS：  <a href="http://node.js.org/" target="_blank" rel="noopener">http://node.js.org/</a></li>
<li>Git：  <a href="http://npm.taobao.org/mirrors/git-for-windows/" target="_blank" rel="noopener">http://npm.taobao.org/mirrors/git-for-windows/</a>  （镜像源）</li>
</ol>
<h1 id="安装cnpm"><a href="#安装cnpm" class="headerlink" title="安装cnpm"></a>安装cnpm</h1><p>安装完NodeJS以及Git后，需要安装cnpm，从而可以使用淘宝镜像源下载安装包，具体做法如下：</p>
<p>以管理员身份打开命令行（win + R，输入cmd），在命令行输入：</p>
<p><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></p>
<h1 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h1><p>命令行输入：</p>
<p><code>cnpm install -g hexo-cli</code></p>
<h1 id="初始化hexo"><a href="#初始化hexo" class="headerlink" title="初始化hexo"></a>初始化hexo</h1><p>在你所想要存放博客源文件的位置新建一个文件夹，并设置为当前路径（按住shift同时右击该文件，选择在此处打开cmd），之后在命令行输入：</p>
<p><code>hexo init</code></p>
<p>至此本地博客搭建完毕，可以在命令行输入 <code>hexo s</code> 来预览。</p>
<hr>
<p>下面介绍如何将本地博客部署到Github上去</p>
<h1 id="github上新建仓库"><a href="#github上新建仓库" class="headerlink" title="github上新建仓库"></a>github上新建仓库</h1><p>需要在github上创建一个仓库 (没有注册github的话先注册一个账号， <a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a>) ，<br>注意仓库名 (Repository name) 必须是&lt;你的昵称&gt;.github.io</p>
<h1 id="安装git的部署插件"><a href="#安装git的部署插件" class="headerlink" title="安装git的部署插件"></a>安装git的部署插件</h1><p>命令行输入：</p>
<p><code>cnpm install hexo-deployer-git –save</code></p>
<p>修改根目录下（之前新建的文件夹）的配置文件_config.yml，修改文件末尾type字段值，并添加repo和branch字段，其中repo字段值为你刚刚创建的github仓库的url。</p>
<p><img src="01.jpg" alt="示例"></p>
<p>之后打开gitbash，在命令行输入：</p>
<p><code>git config --global user.name &quot;你的github用户名&quot;</code></p>
<p>再输入：</p>
<p><code>git config --global user.email &quot;XXX@XXX&quot;</code></p>
<h1 id="推送到远端"><a href="#推送到远端" class="headerlink" title="推送到远端"></a>推送到远端</h1><p>返回命令行，输入： <code>hexo d</code> 将文件推送到github服务器端，第一次会出现弹窗，输入github用户名与密码完成验证即可。</p>
<h1 id="访问个人博客"><a href="#访问个人博客" class="headerlink" title="访问个人博客"></a>访问个人博客</h1><p>至此，博客成功部署到github上去了，你就可以使用之前输入的仓库名(XXX.github.io)访问博客了（可能由于没有及时更新而出现无法打开的问题，可以尝试多刷新几次）。</p>
<h1 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h1><p>默认主题为landscape，你可以上 <a href="https://hexo.io/themes/" target="_blank" rel="noopener">https://hexo.io/themes/</a> 寻找你心仪的主题。</p>
<p>找到想要的主题后，可以进行克隆，在命令行输入：</p>
<p><code>git clone https://github.com/XXX.git themes/&lt;主题名&gt;</code></p>
<p>可以将主题克隆到你本地的themes文件夹下的&lt;主题名&gt;子文件夹中。</p>
<p>之后修改根目录下的配置文件_config.yml，将其中的theme字段值改为新的主题名（前面的&lt;主题名&gt;），这样主题就应用到你的博客上了，之后可以根据官方文档进行一些个性化参数的配置。</p>
<hr>
<h1 id="常用的hexo命令"><a href="#常用的hexo命令" class="headerlink" title="*  常用的hexo命令"></a>*  常用的hexo命令</h1><p>hexo new “My New Post”  创建新博文</p>
<p>hexo s  在4000端口启动本地服务器，可预览博客效果</p>
<p>hexo clean 清除缓存文件 db.json 和已生成的静态文件 public</p>
<p>hexo generate 生成静态文件</p>
<p>hexo deploy 部署到远端</p>
]]></content>
      <categories>
        <category>实战</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机组成原理-汉明码</title>
    <url>/2020/05/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86-%E6%B1%89%E6%98%8E%E7%A0%81/</url>
    <content><![CDATA[<p>[简介] 本文主要介绍汉明码的结构与纠错原理</p>
<h1 id="1-检错与纠错能力"><a href="#1-检错与纠错能力" class="headerlink" title="1-检错与纠错能力"></a>1-检错与纠错能力</h1><p>在介绍检错和纠错能力之前，首先需要引入一个概念——最小汉明距离，即从任意一个有效编码变换到另一个有效编码所需改变的最小位数。假设一种编码方式的最小汉明距离为 L，它的最大检错位数为 D，最大纠错位数为 C，则它们之间满足：L-1 = D+C（且D ≥ C）</p>
<h1 id="2-汉明码的结构"><a href="#2-汉明码的结构" class="headerlink" title="2-汉明码的结构"></a>2-汉明码的结构</h1><p>汉明编码的基本思想就是将数据划分为若干组，每组分别用一位冗余位进行校验（通常为偶校验），同时允许不同组间有交叉，而实际上也正式利用不同组间的交叉，当有几组校验出错时，说明是这几组所共同检测的位发生了错误。</p>
<p>在进行汉明编码之前，首先要确定所需增加校验位的位数，可以根据 2<sup>r</sup> ≥ d+r+1来确定，其中 r 为所需添加检验位的位数，d 为信息位的位数。它的解释是这样的，增加的 r 位检验位能够表示 2<sup>r</sup> 种不同的情况，它需要至少能标识出 d 位信息位以及 r 位检验位分别出了一位错误以及所有位都没有出错的情况，即 d+r+1 种不同出错情况。</p>
<p>在确定了所需增加的检验位的位数后，就可以将r位检验位安排到第 2<sup>r</sup> 位上（i = 1，2，3……r），再将信息位按照原来的相对顺序放到剩余位上。而每个检验位的取值可以根据它需要校验的这组数据来确定，以偶检验为例，它的取值即为这组数据各位的异或运算结果。</p>
<p>下面再介绍每位检验位需要校验哪些位上的数据。为了使得出错后能够根据各检验位组合起来形成的二进制数 r<sub>1</sub>r<sub>2</sub>r<sub>3</sub>…. 的十进制值去指示出错位，就可以将 r<sub>i</sub> (i=1,2,3…) 去检测第e位，其中e的取值为除第 i 位取值为 1、其余位取值任意的所有二进制数的十进制值。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>机组</tag>
      </tags>
  </entry>
  <entry>
    <title>PAT乙级_1003</title>
    <url>/2020/06/03/PAT%E4%B9%99%E7%BA%A7-1003/</url>
    <content><![CDATA[<h2 id="【介绍】"><a href="#【介绍】" class="headerlink" title="【介绍】"></a>【介绍】</h2><p><strong>答案正确</strong>”是自动判题系统给出的最令人欢喜的回复。本题属于 PAT 的“<strong>答案正确</strong>”大派送 —— 只要读入的字符串满足下列条件，系统就输出“<strong>答案正确</strong>”，否则输出“<strong>答案错误</strong>”。</p>
<p>得到“<strong>答案正确</strong>”的条件是：</p>
<ol>
<li>字符串中必须仅有 <code>P</code>、 <code>A</code>、 <code>T</code>这三种字符，不可以包含其它字符；</li>
<li>任意形如 <code>xPATx</code> 的字符串都可以获得“<strong>答案正确</strong>”，其中 <code>x</code> 或者是空字符串，或者是仅由字母 <code>A</code> 组成的字符串；</li>
<li>如果 <code>aPbTc</code> 是正确的，那么 <code>aPbATca</code> 也是正确的，其中 <code>a</code>、 <code>b</code>、 <code>c</code> 均或者是空字符串，或者是仅由字母 <code>A</code> 组成的字符串。</li>
</ol>
<p>现在就请你为 PAT 写一个自动裁判程序，判定哪些字符串是可以获得“<strong>答案正确</strong>”的。</p>
<h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>每个测试输入包含 1 个测试用例。第 1 行给出一个正整数 <em>n</em> (&lt;10)，是需要检测的字符串个数。接下来每个字符串占一行，字符串长度不超过 100，且不包含空格。</p>
<h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>每个字符串的检测结果占一行，如果该字符串可以获得“<strong>答案正确</strong>”，则输出 <code>YES</code>，否则输出 <code>NO</code>。</p>
<h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">8</span><br><span class="line">PAT</span><br><span class="line">PAAT</span><br><span class="line">AAPATAA</span><br><span class="line">AAPAATAAAA</span><br><span class="line">xPATx</span><br><span class="line">PT</span><br><span class="line">Whatever</span><br><span class="line">APAAATAA</span><br></pre></td></tr></table></figure>

<h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">YES</span><br><span class="line">YES</span><br><span class="line">YES</span><br><span class="line">YES</span><br><span class="line">NO</span><br><span class="line">NO</span><br><span class="line">NO</span><br><span class="line">NO</span><br></pre></td></tr></table></figure>

<h2 id="【经验】"><a href="#【经验】" class="headerlink" title="【经验】"></a>【经验】</h2><p>解本题的核心在于第三个条件：</p>
<blockquote>
<ol start="3">
<li>如果 <code>aPbTc</code> 是正确的，那么 <code>aPbATca</code> 也是正确的，其中 <code>a</code>、 <code>b</code>、 <code>c</code> 均或者是空字符串，或者是仅由字母 <code>A</code> 组成的字符串。</li>
</ol>
</blockquote>
<p>该条件为一个递归条件，可以将整个字符串分为三个部分——<strong>a</strong> : “ P ”之前 、<strong>b</strong>: “ P ” 之后 “ T ”之前、<strong>c</strong> :  “ T “之后，这样我们可以发现随着 b 部分 “ A ” 的数量的增加 ： 1，2，3…..，c 部分包含 “ A “的数量也相应的变为 a 部分 “ A ” 的数量的 1， 2， 3….. 倍。</p>
<h2 id="【代码】"><a href="#【代码】" class="headerlink" title="【代码】"></a>【代码】</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, i, k, a, b, tag;</span><br><span class="line">    <span class="keyword">char</span> s[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> ret[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; n; k++)</span><br><span class="line">    &#123;</span><br><span class="line">        a = i = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line">        tag = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (s[i] != <span class="string">'P'</span> &amp;&amp; tag) <span class="comment">// 使用变量a记录 a 部分“A”的数量</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == <span class="string">'A'</span>) </span><br><span class="line">            &#123;</span><br><span class="line">                i++;</span><br><span class="line">                a++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                tag = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (tag)</span><br><span class="line">        &#123;</span><br><span class="line">            i++;</span><br><span class="line">            b = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (s[i] == <span class="string">'A'</span> &amp;&amp; i++ &lt; <span class="number">100</span>) b++; <span class="comment">// 使用变量 b 记录 b 部分“A”的数量</span></span><br><span class="line">            <span class="keyword">if</span> (s[i++] == <span class="string">'T'</span> &amp;&amp; b != <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                b *= a;  	<span class="comment">// c部分 “ A ”的数量为 a 部分的 a 倍</span></span><br><span class="line">                <span class="keyword">while</span> (i &lt; <span class="number">100</span> &amp;&amp; s[i++] == <span class="string">'A'</span> &amp;&amp; b) b--;</span><br><span class="line">                <span class="keyword">if</span> (!b &amp;&amp; !s[i]) ret[k] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) s[i] = <span class="string">'\0'</span>;</span><br><span class="line">            </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i != <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">""</span>); </span><br><span class="line">        <span class="keyword">if</span> (ret[i] == <span class="number">1</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>刷题</category>
      </categories>
      <tags>
        <tag>PAT</tag>
      </tags>
  </entry>
</search>
